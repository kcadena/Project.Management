//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MProjectWPF.MProjectWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MProjectWCF.IMProjectService")]
    public interface IMProjectService {
        
        // CODEGEN: Se está generando un contrato de mensaje, ya que el nombre de contenedor (UserUpload) del mensaje UserUpload no coincide con el valor predeterminado (getUser)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getUser", ReplyAction="http://tempuri.org/IMProjectService/getUserResponse")]
        MProjectWPF.MProjectWCF.UserDownload getUser(MProjectWPF.MProjectWCF.UserUpload request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getUser", ReplyAction="http://tempuri.org/IMProjectService/getUserResponse")]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.UserDownload> getUserAsync(MProjectWPF.MProjectWCF.UserUpload request);
        
        // CODEGEN: Se está generando un contrato de mensaje, ya que el nombre de contenedor (FileInformation) del mensaje FileInformation no coincide con el valor predeterminado (downloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/downloadFile", ReplyAction="http://tempuri.org/IMProjectService/downloadFileResponse")]
        MProjectWPF.MProjectWCF.StreamInformation downloadFile(MProjectWPF.MProjectWCF.FileInformation request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/downloadFile", ReplyAction="http://tempuri.org/IMProjectService/downloadFileResponse")]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.StreamInformation> downloadFileAsync(MProjectWPF.MProjectWCF.FileInformation request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addUser", ReplyAction="http://tempuri.org/IMProjectService/addUserResponse")]
        string[] addUser(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addUser", ReplyAction="http://tempuri.org/IMProjectService/addUserResponse")]
        System.Threading.Tasks.Task<string[]> addUserAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getUser1", ReplyAction="http://tempuri.org/IMProjectService/getUser1Response")]
        System.Collections.Generic.Dictionary<string, string> getUser1(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getUser1", ReplyAction="http://tempuri.org/IMProjectService/getUser1Response")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> getUser1Async(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/countlog", ReplyAction="http://tempuri.org/IMProjectService/countlogResponse")]
        int countlog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/countlog", ReplyAction="http://tempuri.org/IMProjectService/countlogResponse")]
        System.Threading.Tasks.Task<int> countlogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/removeUser", ReplyAction="http://tempuri.org/IMProjectService/removeUserResponse")]
        string[] removeUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/removeUser", ReplyAction="http://tempuri.org/IMProjectService/removeUserResponse")]
        System.Threading.Tasks.Task<string[]> removeUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/readLog", ReplyAction="http://tempuri.org/IMProjectService/readLogResponse")]
        string[][] readLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/readLog", ReplyAction="http://tempuri.org/IMProjectService/readLogResponse")]
        System.Threading.Tasks.Task<string[][]> readLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getLinks", ReplyAction="http://tempuri.org/IMProjectService/getLinksResponse")]
        string[] getLinks(long key, long idcar, long usu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getLinks", ReplyAction="http://tempuri.org/IMProjectService/getLinksResponse")]
        System.Threading.Tasks.Task<string[]> getLinksAsync(long key, long idcar, long usu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getLinks2", ReplyAction="http://tempuri.org/IMProjectService/getLinks2Response")]
        string[] getLinks2(long key, long idcar, long usu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getLinks2", ReplyAction="http://tempuri.org/IMProjectService/getLinks2Response")]
        System.Threading.Tasks.Task<string[]> getLinks2Async(long key, long idcar, long usu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/updateTableSequence", ReplyAction="http://tempuri.org/IMProjectService/updateTableSequenceResponse")]
        void updateTableSequence(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/updateTableSequence", ReplyAction="http://tempuri.org/IMProjectService/updateTableSequenceResponse")]
        System.Threading.Tasks.Task updateTableSequenceAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addCaracteristicas", ReplyAction="http://tempuri.org/IMProjectService/addCaracteristicasResponse")]
        void addCaracteristicas(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addCaracteristicas", ReplyAction="http://tempuri.org/IMProjectService/addCaracteristicasResponse")]
        System.Threading.Tasks.Task addCaracteristicasAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addProyectos", ReplyAction="http://tempuri.org/IMProjectService/addProyectosResponse")]
        void addProyectos(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addProyectos", ReplyAction="http://tempuri.org/IMProjectService/addProyectosResponse")]
        System.Threading.Tasks.Task addProyectosAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addProyectosMetaDatos", ReplyAction="http://tempuri.org/IMProjectService/addProyectosMetaDatosResponse")]
        void addProyectosMetaDatos(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addProyectosMetaDatos", ReplyAction="http://tempuri.org/IMProjectService/addProyectosMetaDatosResponse")]
        System.Threading.Tasks.Task addProyectosMetaDatosAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addRecursos", ReplyAction="http://tempuri.org/IMProjectService/addRecursosResponse")]
        void addRecursos(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addRecursos", ReplyAction="http://tempuri.org/IMProjectService/addRecursosResponse")]
        System.Threading.Tasks.Task addRecursosAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addPresupuesto", ReplyAction="http://tempuri.org/IMProjectService/addPresupuestoResponse")]
        void addPresupuesto(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addPresupuesto", ReplyAction="http://tempuri.org/IMProjectService/addPresupuestoResponse")]
        System.Threading.Tasks.Task addPresupuestoAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addCostos", ReplyAction="http://tempuri.org/IMProjectService/addCostosResponse")]
        void addCostos(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addCostos", ReplyAction="http://tempuri.org/IMProjectService/addCostosResponse")]
        System.Threading.Tasks.Task addCostosAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/updateCaracteristicas", ReplyAction="http://tempuri.org/IMProjectService/updateCaracteristicasResponse")]
        void updateCaracteristicas(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/updateCaracteristicas", ReplyAction="http://tempuri.org/IMProjectService/updateCaracteristicasResponse")]
        System.Threading.Tasks.Task updateCaracteristicasAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/updateProyectos", ReplyAction="http://tempuri.org/IMProjectService/updateProyectosResponse")]
        void updateProyectos(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/updateProyectos", ReplyAction="http://tempuri.org/IMProjectService/updateProyectosResponse")]
        System.Threading.Tasks.Task updateProyectosAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/DeleteProject", ReplyAction="http://tempuri.org/IMProjectService/DeleteProjectResponse")]
        void DeleteProject(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/DeleteProject", ReplyAction="http://tempuri.org/IMProjectService/DeleteProjectResponse")]
        System.Threading.Tasks.Task DeleteProjectAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addActividades", ReplyAction="http://tempuri.org/IMProjectService/addActividadesResponse")]
        void addActividades(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/addActividades", ReplyAction="http://tempuri.org/IMProjectService/addActividadesResponse")]
        System.Threading.Tasks.Task addActividadesAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/updateActividades", ReplyAction="http://tempuri.org/IMProjectService/updateActividadesResponse")]
        void updateActividades(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/updateActividades", ReplyAction="http://tempuri.org/IMProjectService/updateActividadesResponse")]
        System.Threading.Tasks.Task updateActividadesAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/DeleteActividad", ReplyAction="http://tempuri.org/IMProjectService/DeleteActividadResponse")]
        void DeleteActividad(System.Collections.Generic.Dictionary<string, string> u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/DeleteActividad", ReplyAction="http://tempuri.org/IMProjectService/DeleteActividadResponse")]
        System.Threading.Tasks.Task DeleteActividadAsync(System.Collections.Generic.Dictionary<string, string> u);
        
        // CODEGEN: Se está generando un contrato de mensaje, ya que la operación fileUpload no es RPC ni está encapsulada en un documento.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/fileUpload", ReplyAction="http://tempuri.org/IMProjectService/fileUploadResponse")]
        MProjectWPF.MProjectWCF.fileUploadResponse fileUpload(MProjectWPF.MProjectWCF.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/fileUpload", ReplyAction="http://tempuri.org/IMProjectService/fileUploadResponse")]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.fileUploadResponse> fileUploadAsync(MProjectWPF.MProjectWCF.RemoteFileInfo request);
        
        // CODEGEN: Se está generando un contrato de mensaje, ya que el nombre de contenedor (DownloadRequest) del mensaje DownloadRequest no coincide con el valor predeterminado (fileDownload)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/fileDownload", ReplyAction="http://tempuri.org/IMProjectService/fileDownloadResponse")]
        MProjectWPF.MProjectWCF.RemoteFileInfo fileDownload(MProjectWPF.MProjectWCF.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/fileDownload", ReplyAction="http://tempuri.org/IMProjectService/fileDownloadResponse")]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.RemoteFileInfo> fileDownloadAsync(MProjectWPF.MProjectWCF.DownloadRequest request);
        
        // CODEGEN: Se está generando un contrato de mensaje, ya que el nombre de contenedor (DownloadRequest) del mensaje DownloadRequest no coincide con el valor predeterminado (getProyects)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getProyects", ReplyAction="http://tempuri.org/IMProjectService/getProyectsResponse")]
        MProjectWPF.MProjectWCF.RemoteFileInfo getProyects(MProjectWPF.MProjectWCF.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/getProyects", ReplyAction="http://tempuri.org/IMProjectService/getProyectsResponse")]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.RemoteFileInfo> getProyectsAsync(MProjectWPF.MProjectWCF.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/assignActivity", ReplyAction="http://tempuri.org/IMProjectService/assignActivityResponse")]
        void assignActivity();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/assignActivity", ReplyAction="http://tempuri.org/IMProjectService/assignActivityResponse")]
        System.Threading.Tasks.Task assignActivityAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/deleteFile", ReplyAction="http://tempuri.org/IMProjectService/deleteFileResponse")]
        void deleteFile(string id_usu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMProjectService/deleteFile", ReplyAction="http://tempuri.org/IMProjectService/deleteFileResponse")]
        System.Threading.Tasks.Task deleteFileAsync(string id_usu);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UserUpload", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UserUpload {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string email;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string password;
        
        public UserUpload() {
        }
        
        public UserUpload(string email, string password) {
            this.email = email;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UserDownload", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UserDownload {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string[] fileList;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string[] folderList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream fileStream;
        
        public UserDownload() {
        }
        
        public UserDownload(string[] fileList, string[] folderList, System.IO.Stream fileStream) {
            this.fileList = fileList;
            this.folderList = folderList;
            this.fileStream = fileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileInformation", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileInformation {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string path;
        
        public FileInformation() {
        }
        
        public FileInformation(string path) {
            this.path = path;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StreamInformation", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class StreamInformation {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string path;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileStream;
        
        public StreamInformation() {
        }
        
        public StreamInformation(string path, System.IO.Stream FileStream) {
            this.path = path;
            this.FileStream = FileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string route;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, string route, System.IO.Stream FileStream) {
            this.FileName = FileName;
            this.route = route;
            this.FileStream = FileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class fileUploadResponse {
        
        public fileUploadResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string usuario;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string usuario) {
            this.usuario = usuario;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMProjectServiceChannel : MProjectWPF.MProjectWCF.IMProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MProjectServiceClient : System.ServiceModel.ClientBase<MProjectWPF.MProjectWCF.IMProjectService>, MProjectWPF.MProjectWCF.IMProjectService {
        
        public MProjectServiceClient() {
        }
        
        public MProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MProjectWPF.MProjectWCF.UserDownload MProjectWPF.MProjectWCF.IMProjectService.getUser(MProjectWPF.MProjectWCF.UserUpload request) {
            return base.Channel.getUser(request);
        }
        
        public string[] getUser(string email, string password, out string[] folderList, out System.IO.Stream fileStream) {
            MProjectWPF.MProjectWCF.UserUpload inValue = new MProjectWPF.MProjectWCF.UserUpload();
            inValue.email = email;
            inValue.password = password;
            MProjectWPF.MProjectWCF.UserDownload retVal = ((MProjectWPF.MProjectWCF.IMProjectService)(this)).getUser(inValue);
            folderList = retVal.folderList;
            fileStream = retVal.fileStream;
            return retVal.fileList;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.UserDownload> MProjectWPF.MProjectWCF.IMProjectService.getUserAsync(MProjectWPF.MProjectWCF.UserUpload request) {
            return base.Channel.getUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.UserDownload> getUserAsync(string email, string password) {
            MProjectWPF.MProjectWCF.UserUpload inValue = new MProjectWPF.MProjectWCF.UserUpload();
            inValue.email = email;
            inValue.password = password;
            return ((MProjectWPF.MProjectWCF.IMProjectService)(this)).getUserAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MProjectWPF.MProjectWCF.StreamInformation MProjectWPF.MProjectWCF.IMProjectService.downloadFile(MProjectWPF.MProjectWCF.FileInformation request) {
            return base.Channel.downloadFile(request);
        }
        
        public System.IO.Stream downloadFile(ref string path) {
            MProjectWPF.MProjectWCF.FileInformation inValue = new MProjectWPF.MProjectWCF.FileInformation();
            inValue.path = path;
            MProjectWPF.MProjectWCF.StreamInformation retVal = ((MProjectWPF.MProjectWCF.IMProjectService)(this)).downloadFile(inValue);
            path = retVal.path;
            return retVal.FileStream;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.StreamInformation> MProjectWPF.MProjectWCF.IMProjectService.downloadFileAsync(MProjectWPF.MProjectWCF.FileInformation request) {
            return base.Channel.downloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.StreamInformation> downloadFileAsync(string path) {
            MProjectWPF.MProjectWCF.FileInformation inValue = new MProjectWPF.MProjectWCF.FileInformation();
            inValue.path = path;
            return ((MProjectWPF.MProjectWCF.IMProjectService)(this)).downloadFileAsync(inValue);
        }
        
        public string[] addUser(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.addUser(u);
        }
        
        public System.Threading.Tasks.Task<string[]> addUserAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.addUserAsync(u);
        }
        
        public System.Collections.Generic.Dictionary<string, string> getUser1(string id) {
            return base.Channel.getUser1(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> getUser1Async(string id) {
            return base.Channel.getUser1Async(id);
        }
        
        public int countlog() {
            return base.Channel.countlog();
        }
        
        public System.Threading.Tasks.Task<int> countlogAsync() {
            return base.Channel.countlogAsync();
        }
        
        public string[] removeUser(int id) {
            return base.Channel.removeUser(id);
        }
        
        public System.Threading.Tasks.Task<string[]> removeUserAsync(int id) {
            return base.Channel.removeUserAsync(id);
        }
        
        public string[][] readLog() {
            return base.Channel.readLog();
        }
        
        public System.Threading.Tasks.Task<string[][]> readLogAsync() {
            return base.Channel.readLogAsync();
        }
        
        public string[] getLinks(long key, long idcar, long usu) {
            return base.Channel.getLinks(key, idcar, usu);
        }
        
        public System.Threading.Tasks.Task<string[]> getLinksAsync(long key, long idcar, long usu) {
            return base.Channel.getLinksAsync(key, idcar, usu);
        }
        
        public string[] getLinks2(long key, long idcar, long usu) {
            return base.Channel.getLinks2(key, idcar, usu);
        }
        
        public System.Threading.Tasks.Task<string[]> getLinks2Async(long key, long idcar, long usu) {
            return base.Channel.getLinks2Async(key, idcar, usu);
        }
        
        public void updateTableSequence(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.updateTableSequence(u);
        }
        
        public System.Threading.Tasks.Task updateTableSequenceAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.updateTableSequenceAsync(u);
        }
        
        public void addCaracteristicas(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.addCaracteristicas(u);
        }
        
        public System.Threading.Tasks.Task addCaracteristicasAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.addCaracteristicasAsync(u);
        }
        
        public void addProyectos(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.addProyectos(u);
        }
        
        public System.Threading.Tasks.Task addProyectosAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.addProyectosAsync(u);
        }
        
        public void addProyectosMetaDatos(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.addProyectosMetaDatos(u);
        }
        
        public System.Threading.Tasks.Task addProyectosMetaDatosAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.addProyectosMetaDatosAsync(u);
        }
        
        public void addRecursos(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.addRecursos(u);
        }
        
        public System.Threading.Tasks.Task addRecursosAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.addRecursosAsync(u);
        }
        
        public void addPresupuesto(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.addPresupuesto(u);
        }
        
        public System.Threading.Tasks.Task addPresupuestoAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.addPresupuestoAsync(u);
        }
        
        public void addCostos(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.addCostos(u);
        }
        
        public System.Threading.Tasks.Task addCostosAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.addCostosAsync(u);
        }
        
        public void updateCaracteristicas(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.updateCaracteristicas(u);
        }
        
        public System.Threading.Tasks.Task updateCaracteristicasAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.updateCaracteristicasAsync(u);
        }
        
        public void updateProyectos(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.updateProyectos(u);
        }
        
        public System.Threading.Tasks.Task updateProyectosAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.updateProyectosAsync(u);
        }
        
        public void DeleteProject(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.DeleteProject(u);
        }
        
        public System.Threading.Tasks.Task DeleteProjectAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.DeleteProjectAsync(u);
        }
        
        public void addActividades(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.addActividades(u);
        }
        
        public System.Threading.Tasks.Task addActividadesAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.addActividadesAsync(u);
        }
        
        public void updateActividades(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.updateActividades(u);
        }
        
        public System.Threading.Tasks.Task updateActividadesAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.updateActividadesAsync(u);
        }
        
        public void DeleteActividad(System.Collections.Generic.Dictionary<string, string> u) {
            base.Channel.DeleteActividad(u);
        }
        
        public System.Threading.Tasks.Task DeleteActividadAsync(System.Collections.Generic.Dictionary<string, string> u) {
            return base.Channel.DeleteActividadAsync(u);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MProjectWPF.MProjectWCF.fileUploadResponse MProjectWPF.MProjectWCF.IMProjectService.fileUpload(MProjectWPF.MProjectWCF.RemoteFileInfo request) {
            return base.Channel.fileUpload(request);
        }
        
        public void fileUpload(string FileName, string route, System.IO.Stream FileStream) {
            MProjectWPF.MProjectWCF.RemoteFileInfo inValue = new MProjectWPF.MProjectWCF.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.route = route;
            inValue.FileStream = FileStream;
            MProjectWPF.MProjectWCF.fileUploadResponse retVal = ((MProjectWPF.MProjectWCF.IMProjectService)(this)).fileUpload(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.fileUploadResponse> MProjectWPF.MProjectWCF.IMProjectService.fileUploadAsync(MProjectWPF.MProjectWCF.RemoteFileInfo request) {
            return base.Channel.fileUploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.fileUploadResponse> fileUploadAsync(string FileName, string route, System.IO.Stream FileStream) {
            MProjectWPF.MProjectWCF.RemoteFileInfo inValue = new MProjectWPF.MProjectWCF.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.route = route;
            inValue.FileStream = FileStream;
            return ((MProjectWPF.MProjectWCF.IMProjectService)(this)).fileUploadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MProjectWPF.MProjectWCF.RemoteFileInfo MProjectWPF.MProjectWCF.IMProjectService.fileDownload(MProjectWPF.MProjectWCF.DownloadRequest request) {
            return base.Channel.fileDownload(request);
        }
        
        public string fileDownload(string usuario, out string route, out System.IO.Stream FileStream) {
            MProjectWPF.MProjectWCF.DownloadRequest inValue = new MProjectWPF.MProjectWCF.DownloadRequest();
            inValue.usuario = usuario;
            MProjectWPF.MProjectWCF.RemoteFileInfo retVal = ((MProjectWPF.MProjectWCF.IMProjectService)(this)).fileDownload(inValue);
            route = retVal.route;
            FileStream = retVal.FileStream;
            return retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.RemoteFileInfo> MProjectWPF.MProjectWCF.IMProjectService.fileDownloadAsync(MProjectWPF.MProjectWCF.DownloadRequest request) {
            return base.Channel.fileDownloadAsync(request);
        }
        
        public System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.RemoteFileInfo> fileDownloadAsync(string usuario) {
            MProjectWPF.MProjectWCF.DownloadRequest inValue = new MProjectWPF.MProjectWCF.DownloadRequest();
            inValue.usuario = usuario;
            return ((MProjectWPF.MProjectWCF.IMProjectService)(this)).fileDownloadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MProjectWPF.MProjectWCF.RemoteFileInfo MProjectWPF.MProjectWCF.IMProjectService.getProyects(MProjectWPF.MProjectWCF.DownloadRequest request) {
            return base.Channel.getProyects(request);
        }
        
        public string getProyects(string usuario, out string route, out System.IO.Stream FileStream) {
            MProjectWPF.MProjectWCF.DownloadRequest inValue = new MProjectWPF.MProjectWCF.DownloadRequest();
            inValue.usuario = usuario;
            MProjectWPF.MProjectWCF.RemoteFileInfo retVal = ((MProjectWPF.MProjectWCF.IMProjectService)(this)).getProyects(inValue);
            route = retVal.route;
            FileStream = retVal.FileStream;
            return retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.RemoteFileInfo> MProjectWPF.MProjectWCF.IMProjectService.getProyectsAsync(MProjectWPF.MProjectWCF.DownloadRequest request) {
            return base.Channel.getProyectsAsync(request);
        }
        
        public System.Threading.Tasks.Task<MProjectWPF.MProjectWCF.RemoteFileInfo> getProyectsAsync(string usuario) {
            MProjectWPF.MProjectWCF.DownloadRequest inValue = new MProjectWPF.MProjectWCF.DownloadRequest();
            inValue.usuario = usuario;
            return ((MProjectWPF.MProjectWCF.IMProjectService)(this)).getProyectsAsync(inValue);
        }
        
        public void assignActivity() {
            base.Channel.assignActivity();
        }
        
        public System.Threading.Tasks.Task assignActivityAsync() {
            return base.Channel.assignActivityAsync();
        }
        
        public void deleteFile(string id_usu) {
            base.Channel.deleteFile(id_usu);
        }
        
        public System.Threading.Tasks.Task deleteFileAsync(string id_usu) {
            return base.Channel.deleteFileAsync(id_usu);
        }
    }
}
