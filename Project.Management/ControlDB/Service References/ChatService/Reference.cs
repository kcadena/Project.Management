//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ControlDB.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ChatService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IO.Stream AvatarIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> UsuDicField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.Stream AvatarID {
            get {
                return this.AvatarIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AvatarIDField, value) != true)) {
                    this.AvatarIDField = value;
                    this.RaisePropertyChanged("AvatarID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> UsuDic {
            get {
                return this.UsuDicField;
            }
            set {
                if ((object.ReferenceEquals(this.UsuDicField, value) != true)) {
                    this.UsuDicField = value;
                    this.RaisePropertyChanged("UsuDic");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChatService")]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DoConnect", ReplyAction="http://tempuri.org/IChatService/DoConnectResponse")]
        void DoConnect(ControlDB.ChatService.User usu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DoConnect", ReplyAction="http://tempuri.org/IChatService/DoConnectResponse")]
        System.Threading.Tasks.Task DoConnectAsync(ControlDB.ChatService.User usu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DoDisConnect", ReplyAction="http://tempuri.org/IChatService/DoDisConnectResponse")]
        void DoDisConnect(ControlDB.ChatService.User usu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DoDisConnect", ReplyAction="http://tempuri.org/IChatService/DoDisConnectResponse")]
        System.Threading.Tasks.Task DoDisConnectAsync(ControlDB.ChatService.User usu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/listUsers", ReplyAction="http://tempuri.org/IChatService/listUsersResponse")]
        System.Collections.Generic.Dictionary<string, ControlDB.ChatService.User> listUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/listUsers", ReplyAction="http://tempuri.org/IChatService/listUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ControlDB.ChatService.User>> listUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ControlDB.ChatService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.ClientBase<ControlDB.ChatService.IChatService>, ControlDB.ChatService.IChatService {
        
        public ChatServiceClient() {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoConnect(ControlDB.ChatService.User usu) {
            base.Channel.DoConnect(usu);
        }
        
        public System.Threading.Tasks.Task DoConnectAsync(ControlDB.ChatService.User usu) {
            return base.Channel.DoConnectAsync(usu);
        }
        
        public void DoDisConnect(ControlDB.ChatService.User usu) {
            base.Channel.DoDisConnect(usu);
        }
        
        public System.Threading.Tasks.Task DoDisConnectAsync(ControlDB.ChatService.User usu) {
            return base.Channel.DoDisConnectAsync(usu);
        }
        
        public System.Collections.Generic.Dictionary<string, ControlDB.ChatService.User> listUsers() {
            return base.Channel.listUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ControlDB.ChatService.User>> listUsersAsync() {
            return base.Channel.listUsersAsync();
        }
    }
}
